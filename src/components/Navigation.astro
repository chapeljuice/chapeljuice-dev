---
interface Props {
  currentPath?: string;
}

const { currentPath = '/' } = Astro.props;

const navItems = [
  { href: '/', label: 'Home' },
  { href: '/about', label: 'About' },
  { href: '/projects', label: 'Projects' },
  { href: '/contact', label: 'Contact' },
  { href: 'https://github.com/chapeljuice', label: 'GitHub', external: true },
];

const normalizedCurrentPath = currentPath || '/';


---

<nav class="bg-white shadow-lg sticky top-0 z-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-16">
      <div class="flex items-center gap-4">
        <span 
          class="main-logo"
          id="logo-toggle"
          role="button"
          tabindex="0"
          aria-label="Toggle color theme"
          style="cursor: pointer;"
        ></span>
        <a href="/" class="bg-home-linkflex-shrink-0 flex items-center">
          <span class="text-2xl font-bold silkscreen-regular flex items-center">
            <span class="inline-block silkscreen-regular">Chapeljuice</span>
          </span>
        </a>
      </div>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        {navItems.map((item) => (
          <a
            href={item.href}
            target={item.external ? "_blank" : undefined}
            rel={item.external ? "noopener noreferrer" : undefined}
            class={`px-3 py-2 rounded-md text-lg font-medium transition-colors relative ${
              (normalizedCurrentPath === item.href || 
               normalizedCurrentPath === item.href + '/' ||
               normalizedCurrentPath.replace(/\/$/, '') === item.href.replace(/\/$/, ''))
                ? 'nav-active'
                : 'text-gray-700 hover:text-primary'
            }`}
          >
            {item.label}
          </a>
        ))}
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden flex items-center">
        <button
          id="mobile-menu-button"
          class="text-gray-700 hover:text-primary focus:outline-none focus:text-primary"
          aria-label="Open navigation menu"
          aria-expanded="false"
          aria-controls="mobile-menu"
        >
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"
            />
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="md:hidden hidden">
      <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white">
        {navItems.map((item) => (
          <a
            href={item.href}
            target={item.external ? "_blank" : undefined}
            rel={item.external ? "noopener noreferrer" : undefined}
            class={`block px-3 py-2 rounded-md text-lg font-medium transition-colors relative ${
              (normalizedCurrentPath === item.href || 
               normalizedCurrentPath === item.href + '/' ||
               normalizedCurrentPath.replace(/\/$/, '') === item.href.replace(/\/$/, ''))
                ? 'nav-active'
                : 'text-gray-700 hover:text-primary'
            }`}
            data-mobile-nav-item
          >
            {item.label}
          </a>
        ))}
      </div>
    </div>
  </div>
</nav>

<script>
  // Client-side functionality for mobile menu and theme toggle
  document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const logoToggle = document.getElementById('logo-toggle');
    
    // Mobile menu toggle
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', function() {
        const isOpen = mobileMenu.classList.contains('hidden');
        mobileMenu.classList.toggle('hidden');
        mobileMenuButton.setAttribute('aria-expanded', isOpen ? 'true' : 'false');
        mobileMenuButton.setAttribute('aria-label', isOpen ? 'Close navigation menu' : 'Open navigation menu');
        
        // Update SVG icon
        const svg = mobileMenuButton.querySelector('svg');
        if (svg) {
          const path = svg.querySelector('path');
          if (path) {
            path.setAttribute('d', isOpen 
              ? 'M6 18L18 6M6 6l12 12' 
              : 'M4 6h16M4 12h16M4 18h16'
            );
          }
        }
      });
      
             // Close mobile menu when clicking on a nav item
       const mobileNavItems = document.querySelectorAll('[data-mobile-nav-item]');
       mobileNavItems.forEach(item => {
         item.addEventListener('click', function(this: HTMLElement) {
           if (!this.getAttribute('target')) { // Don't close for external links
            mobileMenu.classList.add('hidden');
            mobileMenuButton.setAttribute('aria-expanded', 'false');
            mobileMenuButton.setAttribute('aria-label', 'Open navigation menu');
            
            // Reset SVG icon
            const svg = mobileMenuButton.querySelector('svg');
            if (svg) {
              const path = svg.querySelector('path');
              if (path) {
                path.setAttribute('d', 'M4 6h16M4 12h16M4 18h16');
              }
            }
          }
        });
      });
    }
    
    // Theme toggle
    if (logoToggle) {
      logoToggle.addEventListener('click', function() {
        const isOrangeTheme = document.body.classList.contains('orange-theme');
        if (isOrangeTheme) {
          document.body.classList.remove('orange-theme');
        } else {
          document.body.classList.add('orange-theme');
        }
      });
      
      // Keyboard support for theme toggle
      logoToggle.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.click();
        }
      });
    }
  });
</script>
